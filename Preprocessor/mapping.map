{
    "argLists2Cnt": {
        "": 308,
        "const char* arg0": 98,
        "double arg0": 14,
        "int arg0": 98,
        "int arg0, int arg1, double arg2, const char* arg3": 14
    },
    "fmtId2Code": [
        {
            "compilationUnit": "INVALID.cc",
            "compressFnDef": "invalidCompress(...) { ....}",
            "decompressFnDef": "invalidDecompress(...) { ... }",
            "filename": "INVALID.cc",
            "fmtString": "INVALID",
            "linenum": "-1",
            "recordFnDef": "invalidRecord(int arg0) { ... }"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs1(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg1(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"Messages in the Header File\";\n\tconst char *filename = \"folder/Sample.h\";\n\tconst int linenum = 29;\n\n\tprintf(fmtString);\n}\n",
            "filename": "folder/Sample.h",
            "fmtString": "Messages in the Header File",
            "linenum": 29,
            "recordFnDef": "void __syang0__fl__1(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 1, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs2(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg2(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"1) Simple times\\r\\n\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 26;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "1) Simple times\\r\\n",
            "linenum": 26,
            "recordFnDef": "void __syang0__fl__2(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 2, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs3(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg3(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"2) More simplicity\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 28;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "2) More simplicity",
            "linenum": 28,
            "recordFnDef": "void __syang0__fl__3(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 3, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs4(BufferUtils::RecordEntry *re, char** out) {\n\tBufferUtils::Nibble *nib = reinterpret_cast<BufferUtils::Nibble*>(*out);\n\t*out += 1;\n\tchar* args = re->argData;\n\tint arg0 = *reinterpret_cast<int*>(args); args += sizeof(int);\n\n\tnib[0].first = BufferUtils::pack(out, arg0);\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg4(std::ifstream &in) {\n\tBufferUtils::Nibble nib[1];\n\tin.read(reinterpret_cast<char*>(&nib), 1);\n\n\tint arg0 = BufferUtils::unpack<int>(in, nib[0].first);\n\n\n\tconst char *fmtString = \"3) How about a number? %d\\n\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 30;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "3) How about a number? %d\\n",
            "linenum": 30,
            "recordFnDef": "void __syang0__fl__4(const char* fmtStr, int arg0) {\n\tint maxSizeOfArgs = sizeof(arg0) + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 4, maxSizeOfArgs, 1);\n\tchar *buffer = re->argData;\n\n\tBufferUtils::recordPrimitive(buffer, arg0);\n\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs5(BufferUtils::RecordEntry *re, char** out) {\n\tBufferUtils::Nibble *nib = reinterpret_cast<BufferUtils::Nibble*>(*out);\n\t*out += 1;\n\tchar* args = re->argData;\n\tint arg0 = *reinterpret_cast<int*>(args); args += sizeof(int);\n\n\tnib[0].first = BufferUtils::pack(out, arg0);\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg5(std::ifstream &in) {\n\tBufferUtils::Nibble nib[1];\n\tin.read(reinterpret_cast<char*>(&nib), 1);\n\n\tint arg0 = BufferUtils::unpack<int>(in, nib[0].first);\n\n\n\tconst char *fmtString = \"4) How about a second number? %d\\n\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 32;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "4) How about a second number? %d\\n",
            "linenum": 32,
            "recordFnDef": "void __syang0__fl__5(const char* fmtStr, int arg0) {\n\tint maxSizeOfArgs = sizeof(arg0) + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 5, maxSizeOfArgs, 1);\n\tchar *buffer = re->argData;\n\n\tBufferUtils::recordPrimitive(buffer, arg0);\n\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs6(BufferUtils::RecordEntry *re, char** out) {\n\tBufferUtils::Nibble *nib = reinterpret_cast<BufferUtils::Nibble*>(*out);\n\t*out += 1;\n\tchar* args = re->argData;\n\tdouble arg0 = *reinterpret_cast<double*>(args); args += sizeof(double);\n\n\tnib[0].first = BufferUtils::pack(out, arg0);\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg6(std::ifstream &in) {\n\tBufferUtils::Nibble nib[1];\n\tin.read(reinterpret_cast<char*>(&nib), 1);\n\n\tdouble arg0 = BufferUtils::unpack<double>(in, nib[0].first);\n\n\n\tconst char *fmtString = \"5) How about a double? %lf\\n\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 34;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "5) How about a double? %lf\\n",
            "linenum": 34,
            "recordFnDef": "void __syang0__fl__6(const char* fmtStr, double arg0) {\n\tint maxSizeOfArgs = sizeof(arg0) + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 6, maxSizeOfArgs, 1);\n\tchar *buffer = re->argData;\n\n\tBufferUtils::recordPrimitive(buffer, arg0);\n\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs7(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n\n\tint stringBytes = re->entrySize - (0) - sizeof(BufferUtils::RecordEntry);\n\tmemcpy(*out, args, stringBytes);\n\targs += stringBytes;\n\t*out += stringBytes;\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg7(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\tstd::string arg0_str;\n\tstd::getline(in, arg0_str, '\\0');\n\tconst char* arg0 = arg0_str.c_str();\n\n\tconst char *fmtString = \"6) How about a nice little string? %s\\n\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 36;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "6) How about a nice little string? %s\\n",
            "linenum": 36,
            "recordFnDef": "void __syang0__fl__7(const char* fmtStr, const char* arg0) {\n\tint str0Len = strlen(arg0) + 1;\n\tint maxSizeOfArgs = 0 + str0Len;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 7, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tmemcpy(buffer, arg0, str0Len); buffer += str0Len;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs8(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n\n\tint stringBytes = re->entrySize - (0) - sizeof(BufferUtils::RecordEntry);\n\tmemcpy(*out, args, stringBytes);\n\targs += stringBytes;\n\t*out += stringBytes;\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg8(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\tstd::string arg0_str;\n\tstd::getline(in, arg0_str, '\\0');\n\tconst char* arg0 = arg0_str.c_str();\n\n\tconst char *fmtString = \"7) And another string? %s\\n\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 38;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "7) And another string? %s\\n",
            "linenum": 38,
            "recordFnDef": "void __syang0__fl__8(const char* fmtStr, const char* arg0) {\n\tint str0Len = strlen(arg0) + 1;\n\tint maxSizeOfArgs = 0 + str0Len;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 8, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tmemcpy(buffer, arg0, str0Len); buffer += str0Len;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs9(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n\n\tint stringBytes = re->entrySize - (0) - sizeof(BufferUtils::RecordEntry);\n\tmemcpy(*out, args, stringBytes);\n\targs += stringBytes;\n\t*out += stringBytes;\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg9(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\tstd::string arg0_str;\n\tstd::getline(in, arg0_str, '\\0');\n\tconst char* arg0 = arg0_str.c_str();\n\n\tconst char *fmtString = \"8)One that should be \\\"end\\\"? %s\\n\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 40;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "8)One that should be \\\"end\\\"? %s\\n",
            "linenum": 40,
            "recordFnDef": "void __syang0__fl__9(const char* fmtStr, const char* arg0) {\n\tint str0Len = strlen(arg0) + 1;\n\tint maxSizeOfArgs = 0 + str0Len;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 9, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tmemcpy(buffer, arg0, str0Len); buffer += str0Len;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs10(BufferUtils::RecordEntry *re, char** out) {\n\tBufferUtils::Nibble *nib = reinterpret_cast<BufferUtils::Nibble*>(*out);\n\t*out += 2;\n\tchar* args = re->argData;\n\tint arg0 = *reinterpret_cast<int*>(args); args += sizeof(int);\n\tint arg1 = *reinterpret_cast<int*>(args); args += sizeof(int);\n\tdouble arg2 = *reinterpret_cast<double*>(args); args += sizeof(double);\n\n\tnib[0].first = BufferUtils::pack(out, arg0);\n\tnib[0].second = BufferUtils::pack(out, arg1);\n\tnib[1].first = BufferUtils::pack(out, arg2);\n\n\tint stringBytes = re->entrySize - (sizeof(arg0) + sizeof(arg1) + sizeof(arg2)) - sizeof(BufferUtils::RecordEntry);\n\tmemcpy(*out, args, stringBytes);\n\targs += stringBytes;\n\t*out += stringBytes;\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg10(std::ifstream &in) {\n\tBufferUtils::Nibble nib[2];\n\tin.read(reinterpret_cast<char*>(&nib), 2);\n\n\tint arg0 = BufferUtils::unpack<int>(in, nib[0].first);\n\tint arg1 = BufferUtils::unpack<int>(in, nib[0].second);\n\tdouble arg2 = BufferUtils::unpack<double>(in, nib[1].first);\n\n\tstd::string arg3_str;\n\tstd::getline(in, arg3_str, '\\0');\n\tconst char* arg3 = arg3_str.c_str();\n\n\tconst char *fmtString = \"9) Hello world number %d of %d (%0.2lf%%)! This is %s!\\n\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 43;\n\n\tprintf(fmtString, arg0, arg1, arg2, arg3);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "9) Hello world number %d of %d (%0.2lf%%)! This is %s!\\n",
            "linenum": 43,
            "recordFnDef": "void __syang0__fl__10(const char* fmtStr, int arg0, int arg1, double arg2, const char* arg3) {\n\tint str3Len = strlen(arg3) + 1;\n\tint maxSizeOfArgs = sizeof(arg0) + sizeof(arg1) + sizeof(arg2) + str3Len;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 10, maxSizeOfArgs, 2);\n\tchar *buffer = re->argData;\n\n\tBufferUtils::recordPrimitive(buffer, arg0);\n\tBufferUtils::recordPrimitive(buffer, arg1);\n\tBufferUtils::recordPrimitive(buffer, arg2);\n\n\tmemcpy(buffer, arg3, str3Len); buffer += str3Len;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs11(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg11(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"10) RAMCLOUD_LOG() \\\"RAMCLOUD_LOG(ERROR, \\\"Hi \\\")\\\"\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 49;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "10) RAMCLOUD_LOG() \\\"RAMCLOUD_LOG(ERROR, \\\"Hi \\\")\\\"",
            "linenum": 49,
            "recordFnDef": "void __syang0__fl__11(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 11, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs12(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg12(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"11) SDF\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 57;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "11) SDF",
            "linenum": 57,
            "recordFnDef": "void __syang0__fl__12(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 12, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs13(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n\n\tint stringBytes = re->entrySize - (0) - sizeof(BufferUtils::RecordEntry);\n\tmemcpy(*out, args, stringBytes);\n\targs += stringBytes;\n\t*out += stringBytes;\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg13(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\tstd::string arg0_str;\n\tstd::getline(in, arg0_str, '\\0');\n\tconst char* arg0 = arg0_str.c_str();\n\n\tconst char *fmtString = \"12) NEWLinesSoEvil %s\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 58;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "12) NEWLinesSoEvil %s",
            "linenum": 58,
            "recordFnDef": "void __syang0__fl__13(const char* fmtStr, const char* arg0) {\n\tint str0Len = strlen(arg0) + 1;\n\tint maxSizeOfArgs = 0 + str0Len;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 13, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tmemcpy(buffer, arg0, str0Len); buffer += str0Len;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs14(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg14(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"13) Yup\\nie\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 61;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "13) Yup\\nie",
            "linenum": 61,
            "recordFnDef": "void __syang0__fl__14(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 14, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs15(BufferUtils::RecordEntry *re, char** out) {\n\tBufferUtils::Nibble *nib = reinterpret_cast<BufferUtils::Nibble*>(*out);\n\t*out += 1;\n\tchar* args = re->argData;\n\tint arg0 = *reinterpret_cast<int*>(args); args += sizeof(int);\n\n\tnib[0].first = BufferUtils::pack(out, arg0);\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg15(std::ifstream &in) {\n\tBufferUtils::Nibble nib[1];\n\tin.read(reinterpret_cast<char*>(&nib), 1);\n\n\tint arg0 = BufferUtils::unpack<int>(in, nib[0].first);\n\n\n\tconst char *fmtString = \"14) Hello %d\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 67;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "14) Hello %d",
            "linenum": 67,
            "recordFnDef": "void __syang0__fl__15(const char* fmtStr, int arg0) {\n\tint maxSizeOfArgs = sizeof(arg0) + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 15, maxSizeOfArgs, 1);\n\tchar *buffer = re->argData;\n\n\tBufferUtils::recordPrimitive(buffer, arg0);\n\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs16(BufferUtils::RecordEntry *re, char** out) {\n\tBufferUtils::Nibble *nib = reinterpret_cast<BufferUtils::Nibble*>(*out);\n\t*out += 1;\n\tchar* args = re->argData;\n\tint arg0 = *reinterpret_cast<int*>(args); args += sizeof(int);\n\n\tnib[0].first = BufferUtils::pack(out, arg0);\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg16(std::ifstream &in) {\n\tBufferUtils::Nibble nib[1];\n\tin.read(reinterpret_cast<char*>(&nib), 1);\n\n\tint arg0 = BufferUtils::unpack<int>(in, nib[0].first);\n\n\n\tconst char *fmtString = \"15) This should not be incremented twice (=1):%d\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 72;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "15) This should not be incremented twice (=1):%d",
            "linenum": 72,
            "recordFnDef": "void __syang0__fl__16(const char* fmtStr, int arg0) {\n\tint maxSizeOfArgs = sizeof(arg0) + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 16, maxSizeOfArgs, 1);\n\tchar *buffer = re->argData;\n\n\tBufferUtils::recordPrimitive(buffer, arg0);\n\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs17(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg17(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"16) Hello /* uncool */\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 74;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "16) Hello /* uncool */",
            "linenum": 74,
            "recordFnDef": "void __syang0__fl__17(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 17, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs18(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg18(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"17) This is rediculous\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 76;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "17) This is rediculous",
            "linenum": 76,
            "recordFnDef": "void __syang0__fl__18(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 18, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs19(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg19(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"18) OLO_SWAG\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 94;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "18) OLO_SWAG",
            "linenum": 94,
            "recordFnDef": "void __syang0__fl__19(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 19, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs20(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg20(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"ssneaky #define LOG\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 107;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "ssneaky #define LOG",
            "linenum": 107,
            "recordFnDef": "void __syang0__fl__20(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 20, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs21(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n\n\tint stringBytes = re->entrySize - (0) - sizeof(BufferUtils::RecordEntry);\n\tmemcpy(*out, args, stringBytes);\n\targs += stringBytes;\n\t*out += stringBytes;\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg21(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\tstd::string arg0_str;\n\tstd::getline(in, arg0_str, '\\0');\n\tconst char* arg0 = arg0_str.c_str();\n\n\tconst char *fmtString = \"No %s\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 111;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "No %s",
            "linenum": 111,
            "recordFnDef": "void __syang0__fl__21(const char* fmtStr, const char* arg0) {\n\tint str0Len = strlen(arg0) + 1;\n\tint maxSizeOfArgs = 0 + str0Len;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 21, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tmemcpy(buffer, arg0, str0Len); buffer += str0Len;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs22(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg22(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"I am so evil\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 112;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "I am so evil",
            "linenum": 112,
            "recordFnDef": "void __syang0__fl__22(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 22, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs23(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n\n\tint stringBytes = re->entrySize - (0) - sizeof(BufferUtils::RecordEntry);\n\tmemcpy(*out, args, stringBytes);\n\targs += stringBytes;\n\t*out += stringBytes;\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg23(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\tstd::string arg0_str;\n\tstd::getline(in, arg0_str, '\\0');\n\tconst char* arg0 = arg0_str.c_str();\n\n\tconst char *fmtString = \"%s\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 119;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "%s",
            "linenum": 119,
            "recordFnDef": "void __syang0__fl__23(const char* fmtStr, const char* arg0) {\n\tint str0Len = strlen(arg0) + 1;\n\tint maxSizeOfArgs = 0 + str0Len;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 23, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tmemcpy(buffer, arg0, str0Len); buffer += str0Len;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs24(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n\n\tint stringBytes = re->entrySize - (0) - sizeof(BufferUtils::RecordEntry);\n\tmemcpy(*out, args, stringBytes);\n\targs += stringBytes;\n\t*out += stringBytes;\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg24(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\tstd::string arg0_str;\n\tstd::getline(in, arg0_str, '\\0');\n\tconst char* arg0 = arg0_str.c_str();\n\n\tconst char *fmtString = \"NonConst: %s\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 122;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "NonConst: %s",
            "linenum": 122,
            "recordFnDef": "void __syang0__fl__24(const char* fmtStr, const char* arg0) {\n\tint str0Len = strlen(arg0) + 1;\n\tint maxSizeOfArgs = 0 + str0Len;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 24, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tmemcpy(buffer, arg0, str0Len); buffer += str0Len;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs25(BufferUtils::RecordEntry *re, char** out) {\n\tBufferUtils::Nibble *nib = reinterpret_cast<BufferUtils::Nibble*>(*out);\n\t*out += 1;\n\tchar* args = re->argData;\n\tint arg0 = *reinterpret_cast<int*>(args); args += sizeof(int);\n\n\tnib[0].first = BufferUtils::pack(out, arg0);\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg25(std::ifstream &in) {\n\tBufferUtils::Nibble nib[1];\n\tin.read(reinterpret_cast<char*>(&nib), 1);\n\n\tint arg0 = BufferUtils::unpack<int>(in, nib[0].first);\n\n\n\tconst char *fmtString = \"{{\\\"(( False curlies and brackets! %d\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 127;\n\n\tprintf(fmtString, arg0);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "{{\\\"(( False curlies and brackets! %d",
            "linenum": 127,
            "recordFnDef": "void __syang0__fl__25(const char* fmtStr, int arg0) {\n\tint maxSizeOfArgs = sizeof(arg0) + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 25, maxSizeOfArgs, 1);\n\tchar *buffer = re->argData;\n\n\tBufferUtils::recordPrimitive(buffer, arg0);\n\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs26(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg26(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"Same line, bad form\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 129;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "Same line, bad form",
            "linenum": 129,
            "recordFnDef": "void __syang0__fl__26(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 26, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs27(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg27(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"Really bad\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 129;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "Really bad",
            "linenum": 129,
            "recordFnDef": "void __syang0__fl__27(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 27, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs28(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg28(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"Ending on different lines\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 131;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "Ending on different lines",
            "linenum": 131,
            "recordFnDef": "void __syang0__fl__28(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 28, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs29(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg29(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"Make sure that the inserted code is before the ++i\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 133;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "Make sure that the inserted code is before the ++i",
            "linenum": 133,
            "recordFnDef": "void __syang0__fl__29(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 29, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs30(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg30(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"The worse\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 135;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "The worse",
            "linenum": 135,
            "recordFnDef": "void __syang0__fl__30(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 30, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs31(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg31(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"TEST\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 137;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "TEST",
            "linenum": 137,
            "recordFnDef": "void __syang0__fl__31(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 31, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs32(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg32(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"Simple Test\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 183;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "Simple Test",
            "linenum": 183,
            "recordFnDef": "void __syang0__fl__32(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 32, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        },
        {
            "compilationUnit": "simpleTest.cc",
            "compressFnDef": "inline void\ncompressArgs33(BufferUtils::RecordEntry *re, char** out) {\n\tchar* args = re->argData;\n\n}\n",
            "decompressFnDef": "inline void\ndecompressPrintArg33(std::ifstream &in) {\n\tBufferUtils::Nibble nib[0];\n\tin.read(reinterpret_cast<char*>(&nib), 0);\n\n\n\n\tconst char *fmtString = \"10) RAMCLOUD_LOG() \\\"RAMCLOUD_LOG(\\\"Hi \\\")\\\"\";\n\tconst char *filename = \"simpleTest.cc\";\n\tconst int linenum = 49;\n\n\tprintf(fmtString);\n}\n",
            "filename": "simpleTest.cc",
            "fmtString": "10) RAMCLOUD_LOG() \\\"RAMCLOUD_LOG(\\\"Hi \\\")\\\"",
            "linenum": 49,
            "recordFnDef": "void __syang0__fl__33(const char* fmtStr) {\n\tint maxSizeOfArgs = 0 + 0;\n\tBufferUtils::RecordEntry *re = PerfUtils::FastLogger::reserveAlloc(maxSizeOfArgs);\n\n\tif (re == nullptr)\n\t\treturn;\n\n\tBufferUtils::recordMetadata(re, 33, maxSizeOfArgs, 0);\n\tchar *buffer = re->argData;\n\tPerfUtils::FastLogger::finishAlloc(re);\n}\n"
        }
    ],
    "fmtStr2Id": {
        "%s": 23,
        "1) Simple times\\r\\n": 2,
        "10) RAMCLOUD_LOG() \\\"RAMCLOUD_LOG(ERROR, \\\"Hi \\\")\\\"": 11,
        "10) RAMCLOUD_LOG() \\\"RAMCLOUD_LOG(\\\"Hi \\\")\\\"": 33,
        "11) SDF": 12,
        "12) NEWLinesSoEvil %s": 13,
        "13) Yup\\nie": 14,
        "14) Hello %d": 15,
        "15) This should not be incremented twice (=1):%d": 16,
        "16) Hello /* uncool */": 17,
        "17) This is rediculous": 18,
        "18) OLO_SWAG": 19,
        "2) More simplicity": 3,
        "3) How about a number? %d\\n": 4,
        "4) How about a second number? %d\\n": 5,
        "5) How about a double? %lf\\n": 6,
        "6) How about a nice little string? %s\\n": 7,
        "7) And another string? %s\\n": 8,
        "8)One that should be \\\"end\\\"? %s\\n": 9,
        "9) Hello world number %d of %d (%0.2lf%%)! This is %s!\\n": 10,
        "Ending on different lines": 28,
        "I am so evil": 22,
        "Make sure that the inserted code is before the ++i": 29,
        "Messages in the Header File": 1,
        "No %s": 21,
        "NonConst: %s": 24,
        "Really bad": 27,
        "Same line, bad form": 26,
        "Simple Test": 32,
        "TEST": 31,
        "The worse": 30,
        "ssneaky #define LOG": 20,
        "{{\\\"(( False curlies and brackets! %d": 25
    },
    "unusedIds": []
}